// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
float4 _Sun;

float2 _PixelOffset; // FOR AA
static const float _MaxBounces = 5;
static const bool _UseHighlights = true;
static const float _SkyboxEnergyBoostCoeff = 1.25f;

static const float PI = 3.14159265f;
static const float INFINITY = 1.#INF;
static const bool DEBUG_NORMALS = false;
// static const float FLOAT_MAX = 340282300000000000000000000000000000000.0f;

// - BEGIN: Ray Constructors -------------------------------------------------------------------------------------
struct Ray
{
	float3 origin;
	float3 direction;
    float3 throughput;
};

Ray NewRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin,
	ray.direction = direction;
    ray.throughput = float3(1.0f, 1.0f, 1.0f); // new rays begin always with full throughput
	return ray;
}
// - END: Ray Constructors ------------------------------------------------------------------------------------

// - BEGIN: Geometry and Intersection Routines -------------------------------------------------------------------------------------
struct Material
{
    float3 diffuse;
    float3 specular;
    float shininess;
};

struct Sphere
{
    // geometric properties
    float3 centre;
    float radius;
    
    // material properties
    Material material;
};

StructuredBuffer<Sphere> _Spheres; // sphere buffer

Material NewMaterial(
    float3 diffuse, 
    float3 specular,
    float shininess
) {
    Material mat;
    mat.diffuse = diffuse;
    mat.specular = specular;
    mat.shininess = shininess;
    
    return mat;
}

Sphere NewSphere(float3 centre, float radius, Material material)
{
    Sphere sphere;
    sphere.centre = centre;
    sphere.radius = radius;
    sphere.material = material;
    return sphere;
}

struct RayCastHit
{
    float3 hit_point;
    float t; // distance valuse
    float3 normal; // surface normal
    Material hit_material;
};

RayCastHit NewRCHit(float3 hit_pos, float dist, float3 normal)
{
    RayCastHit rc_hit;
    rc_hit.hit_point = hit_pos;
    rc_hit.t = dist;
    rc_hit.normal = normal;
    
    rc_hit.hit_material = NewMaterial(
        float3(0.0f, 0.0f, 0.0f),
        float3(0.0f, 0.0f, 0.0f),
        0.0f
    );
	
    return rc_hit;
}
// - END: Geometry and Intersection Routines ---------------------------------------------------------------------------------------


// - BEGIN: Ray Generation  ----------------------------------------------------------

bool SphereIntersects(Ray ray, inout RayCastHit rc_hit_closest, Sphere sphere)
{
    // RayCastHit rc_hit = NewRCHit(float3(0.0f, 0.0f, 0.0f), FLOAT_MAX, float3(0.0f, 0.0f, 0.0f));
    float3 centre = sphere.centre;
    float radius = sphere.radius;
    
    float3 origin_to_centre = ray.origin - centre;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0f * dot(ray.direction, origin_to_centre);
    float c = dot(origin_to_centre, origin_to_centre) - radius * radius;
    float discriminant = b * b - 4.0f * a * c;
    bool norm_outward = true; // may need another approach, such as the dot prod

    if (discriminant < 0.0f) {
        return false; // complex roots mean no intersection
    }

    float t1 = (-b + sqrt(discriminant)) / (2.0f * a);
    float t2 = (-b - sqrt(discriminant)) / (2.0f * a);
    float root; // intersection t-values are the roots of the quadratic
        
    if (t1 < 0.0f || t2 < 0.0f) { // a negative root means ray is in the sphere.
        root = max(t1, t2);
    } else {
        root = min(t1, t2);
    }
    
    float3 local_hit_point = ray.origin + ray.direction * root;
    float3 local_norm = normalize(local_hit_point - centre);
    
    if (root > 0.0f && root < rc_hit_closest.t) {
        // this point is closer, so update the closest intersection record
        rc_hit_closest.t = distance(local_hit_point, ray.origin);
        rc_hit_closest.hit_point = local_hit_point;
        rc_hit_closest.normal = local_norm;
        rc_hit_closest.hit_material = sphere.material;
        
        return true;
    } else {
        return false;
    }
}

// For this demo, we will always define a ground plane at y-level 0.
bool GroundPlaneIntersects(Ray ray, inout RayCastHit rc_hit_closest)
{
	// camera offset in y from origin divided by ray direction's y component
	// gives the t-value for the infinite ground plane intersection
    float t = -ray.origin.y / ray.direction.y; 
    
    float3 plane_diffuse = float3(0.0f, 0.0f, 0.0f);
    float3 plane_spec = float3(0.6f, 0.6f, 0.6f);
    float plane_shininess = 200.0f;
	
    if (t > 0.0f && t < rc_hit_closest.t) {
        rc_hit_closest.t = t;
        rc_hit_closest.hit_point = ray.origin + t * ray.direction;
        rc_hit_closest.normal = float3(0.0f, 1.0f, 0.0f); // always known, it's the y = 1 standard basis vector
        rc_hit_closest.hit_material = NewMaterial(plane_diffuse, plane_spec, plane_shininess);
        return true;
    } else {
        return false;
    }
}

// The scene intersection routine. Returns the ray intersection record that represents the closest hit.
// If the t-value is infinity, then there was no hit.
RayCastHit RayCast(Ray ray)
{
    
	// the return value is going to be the RC Hit record of the closest intersection
    RayCastHit rc_hit = NewRCHit(float3(0.0f, 0.0f, 0.0f), INFINITY, float3(0.0f, 0.0f, 0.0f));
    GroundPlaneIntersects(ray, rc_hit);
    
    // - BEGIN: Geometry Intersection Test
    // must extract StructuredBuffer by reference
    uint sphere_count;
    uint stride;
    _Spheres.GetDimensions(sphere_count, stride);
    for (uint i = 0; i < sphere_count; i++) {
        SphereIntersects(ray, rc_hit, _Spheres[i]);
    }
    return rc_hit;
}

// Given a Vector2 in normalized device coordinates [-1, 1], generate a primary ray from the camera
Ray CameraRayGen(float2 ndc_xy) 
{
	// As before, we want ray origin and direction in world space.
	
	// Extract camera aperture transform
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// invert the projection of camera-space direction --> ndc-uv coordinates...
    float3 direction = mul(_CameraInverseProjection, float4(ndc_xy, 0.0f, 1.0f)).xyz;

	// ...then, transform to world space and normalize.
    direction = normalize(
		mul(_CameraToWorld, float4(direction, 0.0f)).xyz
	);
	
    return NewRay(origin, direction);
}

// - END: Ray Generation and Intersection Routines ----------------------------------------------------------


// - BEGIN: Shading Model --------------------------------------------------------

float3 Blinn_Phong(
    float3 light_dir, // w_i
    float3 light_colour,
    float3 normal,
    float3 half_vector,
    float3 diffuse,
    float3 specular,
    float3 shininess
)
{
    float point_diffuse = dot(normal, light_dir); // n \dot l
    float3 lambertian = diffuse * light_colour * max(point_diffuse, 0.0);

    float point_spec = dot(normal, half_vector); // n \dot h
    float3 phong = specular * light_colour * pow(max(point_spec, 0.0), shininess);
    
    if (!_UseHighlights) {
        phong = float3(0.0f, 0.0f, 0.0f);
    }
    
    return lambertian + phong;
}


float3 ComputeLighting(inout Ray ray, RayCastHit rc_hit)
{
    if (rc_hit.t < INFINITY) { // on intersection with scene geometry
        
        /* float3 diffuse = float3(0.2f, 0.2f, 0.2f);
        float3 specular = float3(0.6f, 0.6f, 0.6f);
        float3 shininess = 200.0f; */
        
        float3 diffuse = rc_hit.hit_material.diffuse;
        float3 specular = rc_hit.hit_material.specular;
        float3 shininess = rc_hit.hit_material.shininess;
        
        // BEGIN: Simplified Blinn-Phong lighting calculations
        float3 normal = normalize(rc_hit.normal);
        float3 half_vec = normalize(-1 * _Sun.xyz + -1 * ray.direction);
        
        float3 obj_colour = Blinn_Phong(
            -_Sun.xyz,
            float3(_Sun.w, _Sun.w, _Sun.w),
            normal,
            half_vec,
            diffuse,
            specular,
            shininess
        );
        
        // since recursion is not supported, we will reflect the ray by reference here
        // and await the next bounce.
        ray.origin = rc_hit.hit_point + rc_hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, rc_hit.normal);
        ray.throughput *= specular; // attenuate the throughput by the specular component
        
        // do not add the colour if the point is shadow-cast
        Ray shadow_ray = NewRay(rc_hit.hit_point + 0.001f * rc_hit.normal, -1 * _Sun.xyz);
        RayCastHit occlusion_hit = RayCast(shadow_ray);
        if (occlusion_hit.t < INFINITY) {
            return float3(0.0f, 0.0f, 0.0f);
        }

        return saturate(obj_colour);
        
    } else { // sample the skybox if no geometry was hit
        
        ray.throughput = 0.0f;
        
		// we want to sample the skybox using spherical coordinates.
		// convert the world-space direction vector to an azimuthal and polar angle on the unit sphere
		// and use those to sample from the skybox texture.
		
		// azimuth
        float theta = -(acos(ray.direction.y) / PI); // for some reason, these need to be negated
	
		// polar
        float phi = -atan2(ray.direction.x, -ray.direction.z) / (2.0f * PI); // normalized to [-1, 1]
		
        float3 skybox_colour = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0.0f).xyz;
        return skybox_colour * _SkyboxEnergyBoostCoeff; 
    }
}

// - END: Shading Model ----------------------------------------------------------

// This is the shader's main routine. The compute shader can write directly to the texture
// through the passed "Result" var.
[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// Retrieve the dimensions of the render texture by reference
    uint width;
    uint height;
    Result.GetDimensions(width, height);
	
	// we will have to transform the pixel to NDC in [-1, 1],
	// which we will offload to the CameraRayGen function to transform 
	// into a world space direction.
    float2 ndc_xy = float2(
		// id.xy effectively gives us the x-y coordinate of the pixel this compute shader is currently "working on"
		// since each shader instance is given a 3-dimensional ID vector
		(
			(id.xy + _PixelOffset) // jitter around pixel centre
			/ float2(width, height) // normalize
		) * 2.0f - 1.0f
	);
	

    // - BEGIN: the ray tracing algorithm on a single pixel -------------------------------
    
    // primary ray generation
    Ray cam_ray = CameraRayGen(ndc_xy);
    
    float3 this_pix_colour = float3(0.0f, 0.0f, 0.0f);
    
    for (int i = 0; i < _MaxBounces; i++) { // HLSL does not support recursion, so we will have to do iterative reflection tracing
        // Raycast to get intersection record
        RayCastHit rc_hit = RayCast(cam_ray);
        
        if (DEBUG_NORMALS) {
            this_pix_colour = rc_hit.normal * 0.5f + 0.5f;
            break;
        }
            
        // offload the shading to the ComputeLighting function
        this_pix_colour += cam_ray.throughput * ComputeLighting(cam_ray, rc_hit);
        
        if (!any(cam_ray.throughput)) { // the any function returns true if any component > 0.0f
            break;
        }
    }
    
    // - END: the ray tracing algorithm on a single pixel ---------------------------------
    
    Result[id.xy] = float4(this_pix_colour, 1.0f);
}
